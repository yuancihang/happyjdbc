package io.happyjdbc;

import java.io.Closeable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

public class DataAccess {

	private static final DataAccess instance = new DataAccess();
	
	public static DataAccess getInstance(){
		return instance;
	}
	
	public static void close(Connection conn){
		try {
			if(conn != null){
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void close(PreparedStatement stat){
		try {
			if(stat != null){
				stat.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void close(ResultSet rs){
		try {
			if(rs != null){
				rs.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private Map<String, DataSource> dsCache = new HashMap<String, DataSource>();
	
	public void addDataSource(String name, DataSource ds){
		dsCache.put(name, ds);
	}
	
	public DataSource getDataSource(String name){
		return dsCache.get(name);
	}
	
	public Connection getConnection(String name){
		if(dsCache.containsKey(name)){
			try {
				return dsCache.get(name).getConnection();
			} catch (SQLException e) {
				throw new RuntimeException(e.getMessage(), e);
			}
		}
		
		return null;
	}
	
	public void shutdown(){
		for(DataSource ds : dsCache.values()){
			try {
				if(ds instanceof Closeable){
					((Closeable)ds).close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public <T> OpResult<T> execute(Op<T> op) throws SQLException{
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		
		try{
			conn = getConnection(op.getDbInstance());
			
			if(op.getAutoGeneratedKeys() > 0){
				ps = conn.prepareStatement(op.getTargetSql(), op.getAutoGeneratedKeys());	
			}else{
				ps = conn.prepareStatement(op.getTargetSql());	
			}
			
			op.setPreparedStatement(ps);
			
			Object result = op.execute(ps);
			if(result != null){
				op.processResult(result);
			}
			
			return op;
		}finally{
			close(rs);
			close(ps);
			close(conn);
		}
	}
	
	public List<OpResult<?>> executeTransaction(List<Op<?>> batchOp) throws SQLException{
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int level = Connection.TRANSACTION_NONE;
		
		try{
			conn = getConnection(batchOp.get(0).getDbInstance());
			
			level = conn.getTransactionIsolation();
			conn.setAutoCommit(false);
			conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
			
			List<OpResult<?>> resultList = new ArrayList<>();
			
			for(Op<?> op : batchOp){
				if(op.getAutoGeneratedKeys() > 0){
					ps = conn.prepareStatement(op.getTargetSql(), op.getAutoGeneratedKeys());	
				}else{
					ps = conn.prepareStatement(op.getTargetSql());	
				}
				
				op.setPreparedStatement(ps);
				
				Object result = op.execute(ps);
				if(result != null){
					op.processResult(result);
				}
				
				resultList.add(op);
			}
			
			conn.commit();
			
			return resultList;
		} catch (Exception e) {
			if(conn != null){
				conn.rollback();
			}
			
			throw new RuntimeException(e.getMessage(), e);
		}finally{
			if(conn != null){
				if(level != Connection.TRANSACTION_NONE){
					conn.setTransactionIsolation(level);
				}
				conn.setAutoCommit(true);
			}
			
			close(rs);
			close(ps);
			close(conn);
		}
	}
}
